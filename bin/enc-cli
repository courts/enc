#!/usr/bin/env ruby
#
# A basic command line client for the Enc module.
#
# This software is licensed under the Creative
# Commons CC0 1.0 Universal License.
# To view a copy of this license, visit
# http://creativecommons.org/publicdomain/zero/1.0/legalcode
#
# @author Patrick Hof

require 'enc/enc'
require 'enc/dec'
require 'optparse'

# Returns all methods the given module provides
#
# @param [Module] mod The module the check
# @return [Array] array of strings with the methods
def get_methods(mod)
  methods = []
  mod.constants.sort.each do |c|
    mod.const_get(c).singleton_methods.sort.each do |m|
      methods << "#{c}::#{m}"
    end
  end
  methods
end

fname = File.basename(__FILE__)
methods = [
  "",
  "Available Encoders",
  "------------------"
]
methods += get_methods(Enc)
methods += [
  "",
  "Available Decoders",
  "------------------"
]
methods += get_methods(Dec)
methods += [
  "",
  "Examples:",
  "#{fname} Std::url <<< '<script>'",
  "#{fname} -n Std::url true <<< '<script>'",
  "",
  "#{fname} -d Std::url <<< '%3Cscript%3E'",
  "#{fname} -d -n Std::url true <<< '%3C%73%63%72%69%70%74%3E'",
  "",
  "Please see the YARD documentation for available parameters.",
  "",
  ""
]

options = {
  :nonewline => false,
  :decoder   => false
}
popts = OptionParser.new do |opts|
  opts.banner = "Usage: #{fname} [options] <(en|de)coder> [params] <string from stdin>"
  opts.separator ""
  opts.on("-d", "--decode", "Decode data") do
    options[:decoder] = true
  end
  opts.on("-n", "--no-newline", "Remove trailing newlines from input (default: #{options[:nonewline]})") do
    options[:nonewline] = true
  end
  opts.on("-h", "--help", "Print this help") do
    puts opts
    puts methods
  end
end.parse!

begin
  mod, m = ARGV[0].split("::")
  params = ARGV[1] ? ARGV[1].split(",") : []
  data = $stdin.read()
  data.chomp! if options[:nonewline]
  if options[:decoder]
    lib = Dec
  else
    lib = Enc
  end
  puts lib.const_get(mod.to_sym).send(m.to_sym, data, *params)
rescue Exception => e
  puts "ERROR: #{e}"
  puts popts
end
